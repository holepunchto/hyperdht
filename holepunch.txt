c is the client
s is the server
Rs is relay picked by server
Rc is relay picked by client
c wants to holepunch to s

Each holepunch message have the following format (some holepunchId stuff excluded):

{
  status: PROBING | ABORTING | HOLEPUNCHING,
  nat: UNKNOWN | CONSISTENT | RANDOM,
  address?: { host, port? }, // your own address to the best of your knowledge
  remoteAddress?: { host, port }, // to indicate what you think the remote's addr is
  token?: <32 bytes>, // token the other side has to echo
  remoteToken?: <32 bytes> // previous received token echoed back
}

Each of these messages are sent encrypted based on data exchanged in the noise handshake.

NOTE: before the holepuncher runs a handshake has happened and c has at least one (untrusted) sample for s' address, through this handshake.

ROUNDTRIP 1:

  c open session to serverAddress (sampled from the connect reply)
  
  c --> Rs --> s
  { status: PROBE, nat: UNKNOWN, address: clientAddress?, remoteAddress: serverAddress }

  s sends punch to peerAddress (provided by relay) or clientAddress (if provided) assuming remoteAddress looks correct (sampled from other peers)
  
  s --> Rs --> c
  { status: PROBE, nat: CONSIST, address: serverAddress, token: S }

NOTE: fast mode will mean 99% of double consistent firewalls will have been punched by now

ROUNDTRIP 2:

  if nat === UNKNOWN, retry after short timeout
  c opens session to serverAddress (if diff)
  
  c --> Rc --> s
  { status: PUNCH, nat: CONSIST, address: clientAddress, token: C, remoteToken: S }

  c has proved its IP to s through the token exchange
  s starts periodic punching to clientAddress

  s --> Rc --> c
  { status: PUNCH, nat: CONSIST, address: serverAddress, remoteToken: C }

  s has proved its IP to c through the token exchange
  c starts periodic punching to serverAddress

ON CONSIST / CONSIST

Low ttl session has already been established through probing.
Keep pinging eachothers addresses at low intervals (ie each second).

Timeout after 5-10s.

ON CONSIST / RANDOM

Random side opens 256 sockets against consistent side, uses low ttl to keep them open (gradually switching to high ttl)
Consistent side ping randomly.

Timeout after 30s.

ON RANDOM / RANDOM

Fail immediately.
